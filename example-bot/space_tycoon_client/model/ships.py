# coding: utf-8

"""
    Space Tycoon

    Space Tycoon server.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from space_tycoon_client.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    NoneClass,
    BoolClass,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class Ships(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    
    
    class _additional_properties(
        DictSchema
    ):
        ship_class = Int64Schema
        locals()["ship-class"] = ship_class
        del locals()['ship_class']
        life = Int64Schema
        name = StrSchema
        player = Int64Schema
    
        @classmethod
        @property
        def position(cls) -> typing.Type['Coordinates']:
            return Coordinates
    
        @classmethod
        @property
        def prev-position(cls) -> typing.Type['Coordinates']:
            return Coordinates
    
        @classmethod
        @property
        def resources(cls) -> typing.Type['Resources']:
            return Resources
    
        @classmethod
        @property
        def command(cls) -> typing.Type['Command']:
            return Command
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            life: typing.Union[life, Unset] = unset,
            name: typing.Union[name, Unset] = unset,
            player: typing.Union[player, Unset] = unset,
            position: typing.Union['Coordinates', Unset] = unset,
            resources: typing.Union['Resources', Unset] = unset,
            command: typing.Union['Command', Unset] = unset,
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> '_additional_properties':
            return super().__new__(
                cls,
                *args,
                life=life,
                name=name,
                player=player,
                position=position,
                resources=resources,
                command=command,
                _configuration=_configuration,
                **kwargs,
            )


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'Ships':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )
