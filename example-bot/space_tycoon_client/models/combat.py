# coding: utf-8

"""
    Space Tycoon

    Space Tycoon server.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Combat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tick': 'int',
        'attacker': 'str',
        'defender': 'str',
        'killed': 'bool'
    }

    attribute_map = {
        'tick': 'tick',
        'attacker': 'attacker',
        'defender': 'defender',
        'killed': 'killed'
    }

    def __init__(self, tick=None, attacker=None, defender=None, killed=None):  # noqa: E501
        """Combat - a model defined in Swagger"""  # noqa: E501
        self._tick = None
        self._attacker = None
        self._defender = None
        self._killed = None
        self.discriminator = None
        if tick is not None:
            self.tick = tick
        if attacker is not None:
            self.attacker = attacker
        if defender is not None:
            self.defender = defender
        if killed is not None:
            self.killed = killed

    @property
    def tick(self):
        """Gets the tick of this Combat.  # noqa: E501


        :return: The tick of this Combat.  # noqa: E501
        :rtype: int
        """
        return self._tick

    @tick.setter
    def tick(self, tick):
        """Sets the tick of this Combat.


        :param tick: The tick of this Combat.  # noqa: E501
        :type: int
        """

        self._tick = tick

    @property
    def attacker(self):
        """Gets the attacker of this Combat.  # noqa: E501


        :return: The attacker of this Combat.  # noqa: E501
        :rtype: str
        """
        return self._attacker

    @attacker.setter
    def attacker(self, attacker):
        """Sets the attacker of this Combat.


        :param attacker: The attacker of this Combat.  # noqa: E501
        :type: str
        """

        self._attacker = attacker

    @property
    def defender(self):
        """Gets the defender of this Combat.  # noqa: E501


        :return: The defender of this Combat.  # noqa: E501
        :rtype: str
        """
        return self._defender

    @defender.setter
    def defender(self, defender):
        """Sets the defender of this Combat.


        :param defender: The defender of this Combat.  # noqa: E501
        :type: str
        """

        self._defender = defender

    @property
    def killed(self):
        """Gets the killed of this Combat.  # noqa: E501


        :return: The killed of this Combat.  # noqa: E501
        :rtype: bool
        """
        return self._killed

    @killed.setter
    def killed(self, killed):
        """Sets the killed of this Combat.


        :param killed: The killed of this Combat.  # noqa: E501
        :type: bool
        """

        self._killed = killed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Combat, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Combat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
