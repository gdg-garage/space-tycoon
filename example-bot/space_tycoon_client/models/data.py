# coding: utf-8

"""
    Space Tycoon

    Space Tycoon server.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_tick': 'CurrentTick',
        'planets': 'dict(str, Planet)',
        'player_id': 'str',
        'players': 'dict(str, Player)',
        'ships': 'dict(str, Ship)',
        'wrecks': 'dict(str, Wreck)',
        'reports': 'DataReports'
    }

    attribute_map = {
        'current_tick': 'currentTick',
        'planets': 'planets',
        'player_id': 'playerId',
        'players': 'players',
        'ships': 'ships',
        'wrecks': 'wrecks',
        'reports': 'reports'
    }

    def __init__(self, current_tick=None, planets=None, player_id=None, players=None, ships=None, wrecks=None, reports=None):  # noqa: E501
        """Data - a model defined in Swagger"""  # noqa: E501
        self._current_tick = None
        self._planets = None
        self._player_id = None
        self._players = None
        self._ships = None
        self._wrecks = None
        self._reports = None
        self.discriminator = None
        self.current_tick = current_tick
        self.planets = planets
        if player_id is not None:
            self.player_id = player_id
        self.players = players
        self.ships = ships
        if wrecks is not None:
            self.wrecks = wrecks
        if reports is not None:
            self.reports = reports

    @property
    def current_tick(self):
        """Gets the current_tick of this Data.  # noqa: E501


        :return: The current_tick of this Data.  # noqa: E501
        :rtype: CurrentTick
        """
        return self._current_tick

    @current_tick.setter
    def current_tick(self, current_tick):
        """Sets the current_tick of this Data.


        :param current_tick: The current_tick of this Data.  # noqa: E501
        :type: CurrentTick
        """
        if current_tick is None:
            raise ValueError("Invalid value for `current_tick`, must not be `None`")  # noqa: E501

        self._current_tick = current_tick

    @property
    def planets(self):
        """Gets the planets of this Data.  # noqa: E501


        :return: The planets of this Data.  # noqa: E501
        :rtype: dict(str, Planet)
        """
        return self._planets

    @planets.setter
    def planets(self, planets):
        """Sets the planets of this Data.


        :param planets: The planets of this Data.  # noqa: E501
        :type: dict(str, Planet)
        """
        if planets is None:
            raise ValueError("Invalid value for `planets`, must not be `None`")  # noqa: E501

        self._planets = planets

    @property
    def player_id(self):
        """Gets the player_id of this Data.  # noqa: E501


        :return: The player_id of this Data.  # noqa: E501
        :rtype: str
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this Data.


        :param player_id: The player_id of this Data.  # noqa: E501
        :type: str
        """

        self._player_id = player_id

    @property
    def players(self):
        """Gets the players of this Data.  # noqa: E501


        :return: The players of this Data.  # noqa: E501
        :rtype: dict(str, Player)
        """
        return self._players

    @players.setter
    def players(self, players):
        """Sets the players of this Data.


        :param players: The players of this Data.  # noqa: E501
        :type: dict(str, Player)
        """
        if players is None:
            raise ValueError("Invalid value for `players`, must not be `None`")  # noqa: E501

        self._players = players

    @property
    def ships(self):
        """Gets the ships of this Data.  # noqa: E501


        :return: The ships of this Data.  # noqa: E501
        :rtype: dict(str, Ship)
        """
        return self._ships

    @ships.setter
    def ships(self, ships):
        """Sets the ships of this Data.


        :param ships: The ships of this Data.  # noqa: E501
        :type: dict(str, Ship)
        """
        if ships is None:
            raise ValueError("Invalid value for `ships`, must not be `None`")  # noqa: E501

        self._ships = ships

    @property
    def wrecks(self):
        """Gets the wrecks of this Data.  # noqa: E501


        :return: The wrecks of this Data.  # noqa: E501
        :rtype: dict(str, Wreck)
        """
        return self._wrecks

    @wrecks.setter
    def wrecks(self, wrecks):
        """Sets the wrecks of this Data.


        :param wrecks: The wrecks of this Data.  # noqa: E501
        :type: dict(str, Wreck)
        """

        self._wrecks = wrecks

    @property
    def reports(self):
        """Gets the reports of this Data.  # noqa: E501


        :return: The reports of this Data.  # noqa: E501
        :rtype: DataReports
        """
        return self._reports

    @reports.setter
    def reports(self, reports):
        """Sets the reports of this Data.


        :param reports: The reports of this Data.  # noqa: E501
        :type: DataReports
        """

        self._reports = reports

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
