# coding: utf-8

"""
    Space Tycoon

    Space Tycoon server.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NetWorth(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'money': 'int',
        'resources': 'int',
        'ships': 'int',
        'total': 'int'
    }

    attribute_map = {
        'money': 'money',
        'resources': 'resources',
        'ships': 'ships',
        'total': 'total'
    }

    def __init__(self, money=None, resources=None, ships=None, total=None):  # noqa: E501
        """NetWorth - a model defined in Swagger"""  # noqa: E501
        self._money = None
        self._resources = None
        self._ships = None
        self._total = None
        self.discriminator = None
        self.money = money
        self.resources = resources
        self.ships = ships
        self.total = total

    @property
    def money(self):
        """Gets the money of this NetWorth.  # noqa: E501


        :return: The money of this NetWorth.  # noqa: E501
        :rtype: int
        """
        return self._money

    @money.setter
    def money(self, money):
        """Sets the money of this NetWorth.


        :param money: The money of this NetWorth.  # noqa: E501
        :type: int
        """
        if money is None:
            raise ValueError("Invalid value for `money`, must not be `None`")  # noqa: E501

        self._money = money

    @property
    def resources(self):
        """Gets the resources of this NetWorth.  # noqa: E501


        :return: The resources of this NetWorth.  # noqa: E501
        :rtype: int
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this NetWorth.


        :param resources: The resources of this NetWorth.  # noqa: E501
        :type: int
        """
        if resources is None:
            raise ValueError("Invalid value for `resources`, must not be `None`")  # noqa: E501

        self._resources = resources

    @property
    def ships(self):
        """Gets the ships of this NetWorth.  # noqa: E501


        :return: The ships of this NetWorth.  # noqa: E501
        :rtype: int
        """
        return self._ships

    @ships.setter
    def ships(self, ships):
        """Sets the ships of this NetWorth.


        :param ships: The ships of this NetWorth.  # noqa: E501
        :type: int
        """
        if ships is None:
            raise ValueError("Invalid value for `ships`, must not be `None`")  # noqa: E501

        self._ships = ships

    @property
    def total(self):
        """Gets the total of this NetWorth.  # noqa: E501


        :return: The total of this NetWorth.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this NetWorth.


        :param total: The total of this NetWorth.  # noqa: E501
        :type: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetWorth, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetWorth):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
