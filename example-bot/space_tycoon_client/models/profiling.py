# coding: utf-8

"""
    Space Tycoon

    Space Tycoon server.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Profiling(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tick': 'int',
        'movement': 'int',
        'attacks': 'int',
        'trades': 'int',
        'recipes': 'int',
        'prices': 'int',
        'constructions': 'int',
        'report': 'int',
        'total': 'int',
        'overall': 'int',
        'at': 'int'
    }

    attribute_map = {
        'tick': 'tick',
        'movement': 'movement',
        'attacks': 'attacks',
        'trades': 'trades',
        'recipes': 'recipes',
        'prices': 'prices',
        'constructions': 'constructions',
        'report': 'report',
        'total': 'total',
        'overall': 'overall',
        'at': 'at'
    }

    def __init__(self, tick=None, movement=None, attacks=None, trades=None, recipes=None, prices=None, constructions=None, report=None, total=None, overall=None, at=None):  # noqa: E501
        """Profiling - a model defined in Swagger"""  # noqa: E501
        self._tick = None
        self._movement = None
        self._attacks = None
        self._trades = None
        self._recipes = None
        self._prices = None
        self._constructions = None
        self._report = None
        self._total = None
        self._overall = None
        self._at = None
        self.discriminator = None
        if tick is not None:
            self.tick = tick
        if movement is not None:
            self.movement = movement
        if attacks is not None:
            self.attacks = attacks
        if trades is not None:
            self.trades = trades
        if recipes is not None:
            self.recipes = recipes
        if prices is not None:
            self.prices = prices
        if constructions is not None:
            self.constructions = constructions
        if report is not None:
            self.report = report
        if total is not None:
            self.total = total
        if overall is not None:
            self.overall = overall
        if at is not None:
            self.at = at

    @property
    def tick(self):
        """Gets the tick of this Profiling.  # noqa: E501


        :return: The tick of this Profiling.  # noqa: E501
        :rtype: int
        """
        return self._tick

    @tick.setter
    def tick(self, tick):
        """Sets the tick of this Profiling.


        :param tick: The tick of this Profiling.  # noqa: E501
        :type: int
        """

        self._tick = tick

    @property
    def movement(self):
        """Gets the movement of this Profiling.  # noqa: E501


        :return: The movement of this Profiling.  # noqa: E501
        :rtype: int
        """
        return self._movement

    @movement.setter
    def movement(self, movement):
        """Sets the movement of this Profiling.


        :param movement: The movement of this Profiling.  # noqa: E501
        :type: int
        """

        self._movement = movement

    @property
    def attacks(self):
        """Gets the attacks of this Profiling.  # noqa: E501


        :return: The attacks of this Profiling.  # noqa: E501
        :rtype: int
        """
        return self._attacks

    @attacks.setter
    def attacks(self, attacks):
        """Sets the attacks of this Profiling.


        :param attacks: The attacks of this Profiling.  # noqa: E501
        :type: int
        """

        self._attacks = attacks

    @property
    def trades(self):
        """Gets the trades of this Profiling.  # noqa: E501


        :return: The trades of this Profiling.  # noqa: E501
        :rtype: int
        """
        return self._trades

    @trades.setter
    def trades(self, trades):
        """Sets the trades of this Profiling.


        :param trades: The trades of this Profiling.  # noqa: E501
        :type: int
        """

        self._trades = trades

    @property
    def recipes(self):
        """Gets the recipes of this Profiling.  # noqa: E501


        :return: The recipes of this Profiling.  # noqa: E501
        :rtype: int
        """
        return self._recipes

    @recipes.setter
    def recipes(self, recipes):
        """Sets the recipes of this Profiling.


        :param recipes: The recipes of this Profiling.  # noqa: E501
        :type: int
        """

        self._recipes = recipes

    @property
    def prices(self):
        """Gets the prices of this Profiling.  # noqa: E501


        :return: The prices of this Profiling.  # noqa: E501
        :rtype: int
        """
        return self._prices

    @prices.setter
    def prices(self, prices):
        """Sets the prices of this Profiling.


        :param prices: The prices of this Profiling.  # noqa: E501
        :type: int
        """

        self._prices = prices

    @property
    def constructions(self):
        """Gets the constructions of this Profiling.  # noqa: E501


        :return: The constructions of this Profiling.  # noqa: E501
        :rtype: int
        """
        return self._constructions

    @constructions.setter
    def constructions(self, constructions):
        """Sets the constructions of this Profiling.


        :param constructions: The constructions of this Profiling.  # noqa: E501
        :type: int
        """

        self._constructions = constructions

    @property
    def report(self):
        """Gets the report of this Profiling.  # noqa: E501


        :return: The report of this Profiling.  # noqa: E501
        :rtype: int
        """
        return self._report

    @report.setter
    def report(self, report):
        """Sets the report of this Profiling.


        :param report: The report of this Profiling.  # noqa: E501
        :type: int
        """

        self._report = report

    @property
    def total(self):
        """Gets the total of this Profiling.  # noqa: E501


        :return: The total of this Profiling.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Profiling.


        :param total: The total of this Profiling.  # noqa: E501
        :type: int
        """

        self._total = total

    @property
    def overall(self):
        """Gets the overall of this Profiling.  # noqa: E501


        :return: The overall of this Profiling.  # noqa: E501
        :rtype: int
        """
        return self._overall

    @overall.setter
    def overall(self, overall):
        """Sets the overall of this Profiling.


        :param overall: The overall of this Profiling.  # noqa: E501
        :type: int
        """

        self._overall = overall

    @property
    def at(self):
        """Gets the at of this Profiling.  # noqa: E501


        :return: The at of this Profiling.  # noqa: E501
        :rtype: int
        """
        return self._at

    @at.setter
    def at(self, at):
        """Sets the at of this Profiling.


        :param at: The at of this Profiling.  # noqa: E501
        :type: int
        """

        self._at = at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Profiling, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Profiling):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
