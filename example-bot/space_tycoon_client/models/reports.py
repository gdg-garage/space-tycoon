# coding: utf-8

"""
    Space Tycoon

    Space Tycoon server.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Reports(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'combat': 'list[Combat]',
        'trade': 'list[Trade]',
        'profiling': 'list[Profiling]',
        'prices': 'Price',
        'resource_amounts': 'dict(str, ResourceAmount)',
        'scores': 'Score',
        'season': 'int',
        'tick': 'int'
    }

    attribute_map = {
        'combat': 'combat',
        'trade': 'trade',
        'profiling': 'profiling',
        'prices': 'prices',
        'resource_amounts': 'resourceAmounts',
        'scores': 'scores',
        'season': 'season',
        'tick': 'tick'
    }

    def __init__(self, combat=None, trade=None, profiling=None, prices=None, resource_amounts=None, scores=None, season=None, tick=None):  # noqa: E501
        """Reports - a model defined in Swagger"""  # noqa: E501
        self._combat = None
        self._trade = None
        self._profiling = None
        self._prices = None
        self._resource_amounts = None
        self._scores = None
        self._season = None
        self._tick = None
        self.discriminator = None
        self.combat = combat
        self.trade = trade
        self.profiling = profiling
        self.prices = prices
        self.resource_amounts = resource_amounts
        self.scores = scores
        self.season = season
        self.tick = tick

    @property
    def combat(self):
        """Gets the combat of this Reports.  # noqa: E501


        :return: The combat of this Reports.  # noqa: E501
        :rtype: list[Combat]
        """
        return self._combat

    @combat.setter
    def combat(self, combat):
        """Sets the combat of this Reports.


        :param combat: The combat of this Reports.  # noqa: E501
        :type: list[Combat]
        """
        if combat is None:
            raise ValueError("Invalid value for `combat`, must not be `None`")  # noqa: E501

        self._combat = combat

    @property
    def trade(self):
        """Gets the trade of this Reports.  # noqa: E501


        :return: The trade of this Reports.  # noqa: E501
        :rtype: list[Trade]
        """
        return self._trade

    @trade.setter
    def trade(self, trade):
        """Sets the trade of this Reports.


        :param trade: The trade of this Reports.  # noqa: E501
        :type: list[Trade]
        """
        if trade is None:
            raise ValueError("Invalid value for `trade`, must not be `None`")  # noqa: E501

        self._trade = trade

    @property
    def profiling(self):
        """Gets the profiling of this Reports.  # noqa: E501

        Profiling information about the game. Used by the visualization website.  # noqa: E501

        :return: The profiling of this Reports.  # noqa: E501
        :rtype: list[Profiling]
        """
        return self._profiling

    @profiling.setter
    def profiling(self, profiling):
        """Sets the profiling of this Reports.

        Profiling information about the game. Used by the visualization website.  # noqa: E501

        :param profiling: The profiling of this Reports.  # noqa: E501
        :type: list[Profiling]
        """
        if profiling is None:
            raise ValueError("Invalid value for `profiling`, must not be `None`")  # noqa: E501

        self._profiling = profiling

    @property
    def prices(self):
        """Gets the prices of this Reports.  # noqa: E501


        :return: The prices of this Reports.  # noqa: E501
        :rtype: Price
        """
        return self._prices

    @prices.setter
    def prices(self, prices):
        """Sets the prices of this Reports.


        :param prices: The prices of this Reports.  # noqa: E501
        :type: Price
        """
        if prices is None:
            raise ValueError("Invalid value for `prices`, must not be `None`")  # noqa: E501

        self._prices = prices

    @property
    def resource_amounts(self):
        """Gets the resource_amounts of this Reports.  # noqa: E501


        :return: The resource_amounts of this Reports.  # noqa: E501
        :rtype: dict(str, ResourceAmount)
        """
        return self._resource_amounts

    @resource_amounts.setter
    def resource_amounts(self, resource_amounts):
        """Sets the resource_amounts of this Reports.


        :param resource_amounts: The resource_amounts of this Reports.  # noqa: E501
        :type: dict(str, ResourceAmount)
        """
        if resource_amounts is None:
            raise ValueError("Invalid value for `resource_amounts`, must not be `None`")  # noqa: E501

        self._resource_amounts = resource_amounts

    @property
    def scores(self):
        """Gets the scores of this Reports.  # noqa: E501


        :return: The scores of this Reports.  # noqa: E501
        :rtype: Score
        """
        return self._scores

    @scores.setter
    def scores(self, scores):
        """Sets the scores of this Reports.


        :param scores: The scores of this Reports.  # noqa: E501
        :type: Score
        """
        if scores is None:
            raise ValueError("Invalid value for `scores`, must not be `None`")  # noqa: E501

        self._scores = scores

    @property
    def season(self):
        """Gets the season of this Reports.  # noqa: E501


        :return: The season of this Reports.  # noqa: E501
        :rtype: int
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this Reports.


        :param season: The season of this Reports.  # noqa: E501
        :type: int
        """
        if season is None:
            raise ValueError("Invalid value for `season`, must not be `None`")  # noqa: E501

        self._season = season

    @property
    def tick(self):
        """Gets the tick of this Reports.  # noqa: E501


        :return: The tick of this Reports.  # noqa: E501
        :rtype: int
        """
        return self._tick

    @tick.setter
    def tick(self, tick):
        """Sets the tick of this Reports.


        :param tick: The tick of this Reports.  # noqa: E501
        :type: int
        """
        if tick is None:
            raise ValueError("Invalid value for `tick`, must not be `None`")  # noqa: E501

        self._tick = tick

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Reports, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Reports):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
