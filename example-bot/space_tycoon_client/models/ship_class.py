# coding: utf-8

"""
    Space Tycoon

    Space Tycoon server.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ShipClass(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'shipyard': 'bool',
        'speed': 'float',
        'cargo_capacity': 'int',
        'life': 'int',
        'damage': 'int',
        'price': 'int',
        'regen': 'int',
        'repair_price': 'int',
        'repair_life': 'int'
    }

    attribute_map = {
        'name': 'name',
        'shipyard': 'shipyard',
        'speed': 'speed',
        'cargo_capacity': 'cargoCapacity',
        'life': 'life',
        'damage': 'damage',
        'price': 'price',
        'regen': 'regen',
        'repair_price': 'repairPrice',
        'repair_life': 'repairLife'
    }

    def __init__(self, name=None, shipyard=None, speed=None, cargo_capacity=None, life=None, damage=None, price=None, regen=None, repair_price=None, repair_life=None):  # noqa: E501
        """ShipClass - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._shipyard = None
        self._speed = None
        self._cargo_capacity = None
        self._life = None
        self._damage = None
        self._price = None
        self._regen = None
        self._repair_price = None
        self._repair_life = None
        self.discriminator = None
        self.name = name
        self.shipyard = shipyard
        self.speed = speed
        self.cargo_capacity = cargo_capacity
        self.life = life
        self.damage = damage
        self.price = price
        self.regen = regen
        self.repair_price = repair_price
        self.repair_life = repair_life

    @property
    def name(self):
        """Gets the name of this ShipClass.  # noqa: E501


        :return: The name of this ShipClass.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ShipClass.


        :param name: The name of this ShipClass.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def shipyard(self):
        """Gets the shipyard of this ShipClass.  # noqa: E501

        whether ships of this class are allowed to construct new ships  # noqa: E501

        :return: The shipyard of this ShipClass.  # noqa: E501
        :rtype: bool
        """
        return self._shipyard

    @shipyard.setter
    def shipyard(self, shipyard):
        """Sets the shipyard of this ShipClass.

        whether ships of this class are allowed to construct new ships  # noqa: E501

        :param shipyard: The shipyard of this ShipClass.  # noqa: E501
        :type: bool
        """
        if shipyard is None:
            raise ValueError("Invalid value for `shipyard`, must not be `None`")  # noqa: E501

        self._shipyard = shipyard

    @property
    def speed(self):
        """Gets the speed of this ShipClass.  # noqa: E501


        :return: The speed of this ShipClass.  # noqa: E501
        :rtype: float
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this ShipClass.


        :param speed: The speed of this ShipClass.  # noqa: E501
        :type: float
        """
        if speed is None:
            raise ValueError("Invalid value for `speed`, must not be `None`")  # noqa: E501

        self._speed = speed

    @property
    def cargo_capacity(self):
        """Gets the cargo_capacity of this ShipClass.  # noqa: E501

        maximum number of resources the ship can carry - sum over all types of resources  # noqa: E501

        :return: The cargo_capacity of this ShipClass.  # noqa: E501
        :rtype: int
        """
        return self._cargo_capacity

    @cargo_capacity.setter
    def cargo_capacity(self, cargo_capacity):
        """Sets the cargo_capacity of this ShipClass.

        maximum number of resources the ship can carry - sum over all types of resources  # noqa: E501

        :param cargo_capacity: The cargo_capacity of this ShipClass.  # noqa: E501
        :type: int
        """
        if cargo_capacity is None:
            raise ValueError("Invalid value for `cargo_capacity`, must not be `None`")  # noqa: E501

        self._cargo_capacity = cargo_capacity

    @property
    def life(self):
        """Gets the life of this ShipClass.  # noqa: E501


        :return: The life of this ShipClass.  # noqa: E501
        :rtype: int
        """
        return self._life

    @life.setter
    def life(self, life):
        """Sets the life of this ShipClass.


        :param life: The life of this ShipClass.  # noqa: E501
        :type: int
        """
        if life is None:
            raise ValueError("Invalid value for `life`, must not be `None`")  # noqa: E501

        self._life = life

    @property
    def damage(self):
        """Gets the damage of this ShipClass.  # noqa: E501


        :return: The damage of this ShipClass.  # noqa: E501
        :rtype: int
        """
        return self._damage

    @damage.setter
    def damage(self, damage):
        """Sets the damage of this ShipClass.


        :param damage: The damage of this ShipClass.  # noqa: E501
        :type: int
        """
        if damage is None:
            raise ValueError("Invalid value for `damage`, must not be `None`")  # noqa: E501

        self._damage = damage

    @property
    def price(self):
        """Gets the price of this ShipClass.  # noqa: E501


        :return: The price of this ShipClass.  # noqa: E501
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ShipClass.


        :param price: The price of this ShipClass.  # noqa: E501
        :type: int
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def regen(self):
        """Gets the regen of this ShipClass.  # noqa: E501

        passive regeneration per tick  # noqa: E501

        :return: The regen of this ShipClass.  # noqa: E501
        :rtype: int
        """
        return self._regen

    @regen.setter
    def regen(self, regen):
        """Sets the regen of this ShipClass.

        passive regeneration per tick  # noqa: E501

        :param regen: The regen of this ShipClass.  # noqa: E501
        :type: int
        """
        if regen is None:
            raise ValueError("Invalid value for `regen`, must not be `None`")  # noqa: E501

        self._regen = regen

    @property
    def repair_price(self):
        """Gets the repair_price of this ShipClass.  # noqa: E501

        price for healing repairLife per tick (for repair command)  # noqa: E501

        :return: The repair_price of this ShipClass.  # noqa: E501
        :rtype: int
        """
        return self._repair_price

    @repair_price.setter
    def repair_price(self, repair_price):
        """Sets the repair_price of this ShipClass.

        price for healing repairLife per tick (for repair command)  # noqa: E501

        :param repair_price: The repair_price of this ShipClass.  # noqa: E501
        :type: int
        """
        if repair_price is None:
            raise ValueError("Invalid value for `repair_price`, must not be `None`")  # noqa: E501

        self._repair_price = repair_price

    @property
    def repair_life(self):
        """Gets the repair_life of this ShipClass.  # noqa: E501

        how much is repaired per tick (for repair command)  # noqa: E501

        :return: The repair_life of this ShipClass.  # noqa: E501
        :rtype: int
        """
        return self._repair_life

    @repair_life.setter
    def repair_life(self, repair_life):
        """Sets the repair_life of this ShipClass.

        how much is repaired per tick (for repair command)  # noqa: E501

        :param repair_life: The repair_life of this ShipClass.  # noqa: E501
        :type: int
        """
        if repair_life is None:
            raise ValueError("Invalid value for `repair_life`, must not be `None`")  # noqa: E501

        self._repair_life = repair_life

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShipClass, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShipClass):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
