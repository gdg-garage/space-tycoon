# coding: utf-8

"""
    Space Tycoon

    Space Tycoon server.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Trade(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tick': 'int',
        'buyer': 'str',
        'seller': 'str',
        'resource': 'str',
        'amount': 'int',
        'price': 'int'
    }

    attribute_map = {
        'tick': 'tick',
        'buyer': 'buyer',
        'seller': 'seller',
        'resource': 'resource',
        'amount': 'amount',
        'price': 'price'
    }

    def __init__(self, tick=None, buyer=None, seller=None, resource=None, amount=None, price=None):  # noqa: E501
        """Trade - a model defined in Swagger"""  # noqa: E501
        self._tick = None
        self._buyer = None
        self._seller = None
        self._resource = None
        self._amount = None
        self._price = None
        self.discriminator = None
        if tick is not None:
            self.tick = tick
        if buyer is not None:
            self.buyer = buyer
        if seller is not None:
            self.seller = seller
        if resource is not None:
            self.resource = resource
        if amount is not None:
            self.amount = amount
        if price is not None:
            self.price = price

    @property
    def tick(self):
        """Gets the tick of this Trade.  # noqa: E501


        :return: The tick of this Trade.  # noqa: E501
        :rtype: int
        """
        return self._tick

    @tick.setter
    def tick(self, tick):
        """Sets the tick of this Trade.


        :param tick: The tick of this Trade.  # noqa: E501
        :type: int
        """

        self._tick = tick

    @property
    def buyer(self):
        """Gets the buyer of this Trade.  # noqa: E501


        :return: The buyer of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._buyer

    @buyer.setter
    def buyer(self, buyer):
        """Sets the buyer of this Trade.


        :param buyer: The buyer of this Trade.  # noqa: E501
        :type: str
        """

        self._buyer = buyer

    @property
    def seller(self):
        """Gets the seller of this Trade.  # noqa: E501


        :return: The seller of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._seller

    @seller.setter
    def seller(self, seller):
        """Sets the seller of this Trade.


        :param seller: The seller of this Trade.  # noqa: E501
        :type: str
        """

        self._seller = seller

    @property
    def resource(self):
        """Gets the resource of this Trade.  # noqa: E501


        :return: The resource of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this Trade.


        :param resource: The resource of this Trade.  # noqa: E501
        :type: str
        """

        self._resource = resource

    @property
    def amount(self):
        """Gets the amount of this Trade.  # noqa: E501


        :return: The amount of this Trade.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Trade.


        :param amount: The amount of this Trade.  # noqa: E501
        :type: int
        """

        self._amount = amount

    @property
    def price(self):
        """Gets the price of this Trade.  # noqa: E501


        :return: The price of this Trade.  # noqa: E501
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Trade.


        :param price: The price of this Trade.  # noqa: E501
        :type: int
        """

        self._price = price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Trade, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Trade):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
