# coding: utf-8

"""
    Space Tycoon

    Space Tycoon server.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from space_tycoon_client.models.resource import Resource  # noqa: F401,E501

class TradingResource(Resource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'buy_price': 'float',
        'sell_price': 'float'
    }
    if hasattr(Resource, "swagger_types"):
        swagger_types.update(Resource.swagger_types)

    attribute_map = {
        'buy_price': 'buyPrice',
        'sell_price': 'sellPrice'
    }
    if hasattr(Resource, "attribute_map"):
        attribute_map.update(Resource.attribute_map)

    def __init__(self, buy_price=None, sell_price=None, *args, **kwargs):  # noqa: E501
        """TradingResource - a model defined in Swagger"""  # noqa: E501
        self._buy_price = None
        self._sell_price = None
        self.discriminator = None
        if buy_price is not None:
            self.buy_price = buy_price
        if sell_price is not None:
            self.sell_price = sell_price
        Resource.__init__(self, *args, **kwargs)

    @property
    def buy_price(self):
        """Gets the buy_price of this TradingResource.  # noqa: E501


        :return: The buy_price of this TradingResource.  # noqa: E501
        :rtype: float
        """
        return self._buy_price

    @buy_price.setter
    def buy_price(self, buy_price):
        """Sets the buy_price of this TradingResource.


        :param buy_price: The buy_price of this TradingResource.  # noqa: E501
        :type: float
        """

        self._buy_price = buy_price

    @property
    def sell_price(self):
        """Gets the sell_price of this TradingResource.  # noqa: E501


        :return: The sell_price of this TradingResource.  # noqa: E501
        :rtype: float
        """
        return self._sell_price

    @sell_price.setter
    def sell_price(self, sell_price):
        """Sets the sell_price of this TradingResource.


        :param sell_price: The sell_price of this TradingResource.  # noqa: E501
        :type: float
        """

        self._sell_price = sell_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TradingResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TradingResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
