/*
 * Space Tycoon
 * Space Tycoon server.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Command;
import org.openapitools.client.model.Credentials;
import org.openapitools.client.model.CurrentTick;
import org.openapitools.client.model.Data;
import org.openapitools.client.model.EndTurn;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.PlayerId;
import org.openapitools.client.model.Reports;
import org.openapitools.client.model.StaticData;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GameApi
 */
@Ignore
public class GameApiTest {

    private final GameApi api = new GameApi();

    
    /**
     * Specify commands for your ships
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void commandsPostTest() throws ApiException {
        Map<String, Command> requestBody = null;
        api.commandsPost(requestBody);

        // TODO: test validations
    }
    
    /**
     * Returns the current tick, season and the approximate time until the next tick.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void currentTickGetTest() throws ApiException {
        CurrentTick response = api.currentTickGet();

        // TODO: test validations
    }
    
    /**
     * Dynamic game data (scores, prices, spaceship positions)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dataGetTest() throws ApiException {
        Data response = api.dataGet();

        // TODO: test validations
    }
    
    /**
     * Signal that your turn is over for the current tick. Returns the current tick and the approximate time until the next tick.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void endTurnPostTest() throws ApiException {
        EndTurn endTurn = null;
        CurrentTick response = api.endTurnPost(endTurn);

        // TODO: test validations
    }
    
    /**
     * Get user session
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loginPostTest() throws ApiException {
        Credentials credentials = null;
        PlayerId response = api.loginPost(credentials);

        // TODO: test validations
    }
    
    /**
     * Fetch statistical data about all players.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reportsGetTest() throws ApiException {
        Reports response = api.reportsGet();

        // TODO: test validations
    }
    
    /**
     * Data that do not change during entire season, such as ships classes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void staticDataGetTest() throws ApiException {
        StaticData response = api.staticDataGet();

        // TODO: test validations
    }
    
}
