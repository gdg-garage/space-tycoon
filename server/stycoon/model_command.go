/*
 * Space Tycoon
 *
 * Space Tycoon server.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package stycoon

type Command struct {

	Type string `json:"type"`

	Target *string `json:"target,omitempty"`

	Destination *Destination `json:"destination,omitempty"`

	Resource *string `json:"resource,omitempty"`

	Amount *int64 `json:"amount,omitempty"`

	ShipClass *string `json:"ship-class,omitempty"`

	Name *string `json:"name,omitempty"`
}

// AssertCommandRequired checks if the required fields are not zero-ed
func AssertCommandRequired(obj Command) error {
	elements := map[string]interface{}{
		"type": obj.Type,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if obj.Destination != nil {
		if err := AssertDestinationRequired(*obj.Destination); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseCommandRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Command (e.g. [][]Command), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseCommandRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aCommand, ok := obj.(Command)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertCommandRequired(aCommand)
	})
}
