/*
 * Space Tycoon
 *
 * Space Tycoon server.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package stycoon

type Command struct {

	Type string `json:"type"`

	Destination Destination `json:"destination,omitempty"`

	Class string `json:"class"`

	Name string `json:"name"`

	Target int64 `json:"target"`

	Resource int64 `json:"resource"`

	Amount int64 `json:"amount"`

	Where int64 `json:"where"`
}

// AssertCommandRequired checks if the required fields are not zero-ed
func AssertCommandRequired(obj Command) error {
	elements := map[string]interface{}{
		"type": obj.Type,
		"class": obj.Class,
		"name": obj.Name,
		"target": obj.Target,
		"resource": obj.Resource,
		"amount": obj.Amount,
		"where": obj.Where,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertDestinationRequired(obj.Destination); err != nil {
		return err
	}
	return nil
}

// AssertRecurseCommandRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Command (e.g. [][]Command), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseCommandRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aCommand, ok := obj.(Command)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertCommandRequired(aCommand)
	})
}
