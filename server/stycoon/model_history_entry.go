/*
 * Space Tycoon
 *
 * Space Tycoon server.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package stycoon

type HistoryEntry struct {

	StaticData StaticData `json:"static-data"`

	Data Data `json:"data"`

	Reports Reports `json:"reports"`
}

// AssertHistoryEntryRequired checks if the required fields are not zero-ed
func AssertHistoryEntryRequired(obj HistoryEntry) error {
	elements := map[string]interface{}{
		"static-data": obj.StaticData,
		"data": obj.Data,
		"reports": obj.Reports,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertStaticDataRequired(obj.StaticData); err != nil {
		return err
	}
	if err := AssertDataRequired(obj.Data); err != nil {
		return err
	}
	if err := AssertReportsRequired(obj.Reports); err != nil {
		return err
	}
	return nil
}

// AssertRecurseHistoryEntryRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of HistoryEntry (e.g. [][]HistoryEntry), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseHistoryEntryRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aHistoryEntry, ok := obj.(HistoryEntry)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertHistoryEntryRequired(aHistoryEntry)
	})
}
