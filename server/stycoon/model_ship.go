/*
 * Space Tycoon
 *
 * Space Tycoon server.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package stycoon

type Ship struct {

	ShipClass string `json:"shipClass"`

	Life int64 `json:"life"`

	Name string `json:"name"`

	Player string `json:"player"`

	Position *[]int64 `json:"position"`

	PrevPosition *[]int64 `json:"prevPosition"`

	Resources map[string]Resource `json:"resources"`

	Command *Command `json:"command,omitempty"`
}

// AssertShipRequired checks if the required fields are not zero-ed
func AssertShipRequired(obj Ship) error {
	elements := map[string]interface{}{
		"shipClass": obj.ShipClass,
		"life": obj.Life,
		"name": obj.Name,
		"player": obj.Player,
		"position": obj.Position,
		"prevPosition": obj.PrevPosition,
		"resources": obj.Resources,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if obj.Command != nil {
		if err := AssertCommandRequired(*obj.Command); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseShipRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Ship (e.g. [][]Ship), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseShipRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aShip, ok := obj.(Ship)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertShipRequired(aShip)
	})
}
