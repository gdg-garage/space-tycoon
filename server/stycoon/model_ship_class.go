/*
 * Space Tycoon
 *
 * Space Tycoon server.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package stycoon

type ShipClass struct {

	Name string `json:"name"`

	// whether ships of this class are allowed to construct new ships
	Shipyard bool `json:"shipyard"`

	Speed float64 `json:"speed"`

	// maximum number of resources the ship can carry - sum over all types of resources
	CargoCapacity int64 `json:"cargo-capacity"`

	Life int64 `json:"life"`

	Damage int64 `json:"damage"`

	Price int64 `json:"price"`

	// passive regeneration per tick
	Regen int64 `json:"regen"`

	// price for healing repairLife per tick (for repair command)
	RepairPrice int64 `json:"repairPrice"`

	// how much is repaired per tick (for repair command)
	RepairLife int64 `json:"repairLife"`
}

// AssertShipClassRequired checks if the required fields are not zero-ed
func AssertShipClassRequired(obj ShipClass) error {
	elements := map[string]interface{}{
		"name": obj.Name,
		"shipyard": obj.Shipyard,
		"speed": obj.Speed,
		"cargo-capacity": obj.CargoCapacity,
		"life": obj.Life,
		"damage": obj.Damage,
		"price": obj.Price,
		"regen": obj.Regen,
		"repairPrice": obj.RepairPrice,
		"repairLife": obj.RepairLife,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseShipClassRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of ShipClass (e.g. [][]ShipClass), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseShipClassRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aShipClass, ok := obj.(ShipClass)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertShipClassRequired(aShipClass)
	})
}
