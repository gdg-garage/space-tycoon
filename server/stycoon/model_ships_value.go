/*
 * Space Tycoon
 *
 * Space Tycoon server.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package stycoon

type ShipsValue struct {
	ShipClass int64 `json:"ship-class"`

	Life int64 `json:"life"`

	Name string `json:"name"`

	Player int64 `json:"player"`

	Position []int64 `json:"position"`

	PrevPosition []int64 `json:"prev-position"`

	Resources map[string]Resource `json:"resources"`

	Command *Command `json:"command,omitempty"`
}

// AssertShipsValueRequired checks if the required fields are not zero-ed
func AssertShipsValueRequired(obj ShipsValue) error {
	elements := map[string]interface{}{
		"ship-class":    obj.ShipClass,
		"life":          obj.Life,
		"name":          obj.Name,
		"player":        obj.Player,
		"position":      obj.Position,
		"prev-position": obj.PrevPosition,
		"resources":     obj.Resources,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if obj.Command != nil {
		if err := AssertCommandRequired(*obj.Command); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseShipsValueRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of ShipsValue (e.g. [][]ShipsValue), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseShipsValueRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aShipsValue, ok := obj.(ShipsValue)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertShipsValueRequired(aShipsValue)
	})
}
